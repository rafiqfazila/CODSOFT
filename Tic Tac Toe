import random
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)
def check_winner(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(row[col] == player for row in board):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False
def is_full(board):
    return all(cell != ' ' for row in board for cell in row)
def minimax(board, depth, is_maximizing):
    if check_winner(board, 'X'):
        return -1
    if check_winner(board, 'O'):
        return 1
    if is_full(board):
        return 0
    if is_maximizing:
        best_score = -float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    score = minimax(board, depth + 1, False)
                    board[i][j] = ' '
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float("inf")
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    score = minimax(board, depth + 1, True)
                    board[i][j] = ' '
                    best_score = min(score, best_score)
        return best_score
def best_move(board):
    best_score = -float("inf")
    best_move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                score = minimax(board, 0, False)
                board[i][j] = ' '
                if score > best_score:
                    best_score = score
                    best_move = (i, j)
    return best_move
def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)
    while True:
        row, col = best_move(board)
        board[row][col] = 'O'
        print_board(board)
        if check_winner(board, 'O'):
            print("Friend wins! You lose!")
            break
        elif is_full(board):
            print("It's a draw!")
            break
        player_row, player_col = map(int, input("Enter your move (row and column, separated by a space): ").split())
        if board[player_row][player_col] == ' ':
            board[player_row][player_col] = 'X'
        else:
            print("Invalid move. Try again.")
            continue
        print_board(board)
        if check_winner(board, 'X'):
            print("Congratulations! You win!")
            break
        elif is_full(board):
            print("It's a draw!")
            break
if __name__ == "__main__":
    main()
