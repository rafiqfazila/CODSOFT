import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.model_selection import train_test_split

# Sample movie ratings dataset (user, movie, rating)
data = {
    'User': [1, 1, 2, 2, 3, 3, 4, 4],
    'Movie': ['A', 'B', 'A', 'C', 'B', 'C', 'D', 'E'],
    'Rating': [5, 4, 5, 3, 4, 2, 3, 1]
}

df = pd.DataFrame(data)

# Create a user-movie matrix
user_movie_matrix = df.pivot(index='User', columns='Movie', values='Rating').fillna(0)

# Split the data into training and testing sets
train_data, test_data = train_test_split(user_movie_matrix, test_size=0.2)

# Calculate the cosine similarity between users
user_similarity = cosine_similarity(train_data)

# Create a DataFrame for user similarity
user_similarity_df = pd.DataFrame(user_similarity, index=train_data.index, columns=train_data.index)

# Function to get movie recommendations for a user
def get_movie_recommendations(user):
    # Find similar users for the given user
    similar_users = user_similarity_df[user].sort_values(ascending=False)[1:]

    # Get movies watched by the user
    user_movies = user_movie_matrix.loc[user]

    # Initialize recommendations
    recommendations = []

    # Iterate over similar users and recommend movies
    for similar_user, similarity_score in similar_users.items():
        similar_user_movies = user_movie_matrix.loc[similar_user]
        new_movies = similar_user_movies[similar_user_movies > 0].index.difference(user_movies.index)
        recommendations.extend([(movie, similarity_score) for movie in new_movies])

    # Group recommendations by movie and calculate weighted scores
    movie_scores = {}
    for movie, score in recommendations:
        if movie in movie_scores:
            movie_scores[movie] += score
        else:
            movie_scores[movie] = score

    # Sort the recommendations by score
    sorted_recommendations = sorted(movie_scores.items(), key=lambda x: x[1], reverse=True)

    return sorted_recommendations

# Example: Get movie recommendations for user 4
user_id = 4
recommendations = get_movie_recommendations(user_id)
print(f"Top movie recommendations for User {user_id}:")
for movie, score in recommendations[:5]:
    print(f"{movie}: Score = {score}")
